name: Unit Testing, Coverage Collection, Package, Release, Documentation and Publish

on: [ push, workflow_dispatch ]

defaults:
  run:
    shell: bash

jobs:
  UnitTesting:
    name: ${{ matrix.icon }} Unit Tests using Python ${{ matrix.python }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - {python: "3.6", icon: 🔴}  # until 23.12.2021
          - {python: "3.7", icon: 🟠}  # until 27.06.2023
          - {python: "3.8", icon: 🟡}  # until Oct. 2024
          - {python: "3.9", icon: 🟢}  # until Oct. 2025
          - {python: "3.10", icon: 🟢} # until Oct. 2026

    env:
      PYTHON: ${{ matrix.python }}
      ARTIFACT: pyTooling-TestReport
    outputs:
      python: ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}
      versions: "3.6, 3.7, 3.8, 3.9, 3.10"

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v2

      - name: 🐍 Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: ☑ Run unit tests
        run: |
          python -m pytest -rA --junitxml=TestReport.xml tests/unit --color=yes

      - name: 📤 Upload 'TestReport.xml' artifact
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}-${{ env.PYTHON }}
          path: TestReport.xml
          if-no-files-found: error
          retention-days: 1


  Coverage:
    name: 📈 Collect Coverage Data using Python 3.10
    runs-on: ubuntu-latest

    env:
      PYTHON: "3.10"
      ARTIFACT: pyTooling-coverage-html
    outputs:
      python: ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v2

      - name: 🐍 Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: 🗂 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Collect coverage
        continue-on-error: true
        run: |
          python -m pytest -rA --cov=.. --cov-config=tests/.coveragerc tests/unit --color=yes

      - name: Convert to cobertura format
        run: |
          coverage xml

      - name: Convert to HTML format
        run: |
          coverage html
          rm htmlcov/.gitignore

      - name: 📊 Publish coverage at CodeCov
        continue-on-error: true
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: PYTHON

      - name: 📉 Publish coverage at Codacy
        continue-on-error: true
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./coverage.xml

      - name: 📤 Upload 'Coverage Report' artifact
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: htmlcov
          if-no-files-found: error
          retention-days: 1


  StaticTypeCheck:
    name: 👀 Check Static Typing using Python 3.10
    runs-on: ubuntu-latest

    env:
      PYTHON: "3.10"
      ARTIFACT: pyTooling-typing-html
    outputs:
      python: ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v2

      - name: 🐍 Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: 🗂 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Make multi-namespace package a 'package'
        run:  touch pyTooling/__init__.py

      - name: Check Static Typing
        continue-on-error: true
        run: mypy --html-report htmlmypy -p pyTooling

      - name: 📤 Upload 'Static Typing Report' artifact
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: htmlmypy
          if-no-files-found: error
          retention-days: 1


  Package:
    name: 📦 Package in Wheel Format
    runs-on: ubuntu-latest

#    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage

    env:
      PYTHON:   ${{ needs.Coverage.outputs.python }}
      ARTIFACT: pyTooling.Packaging-wheel
    outputs:
      python:   ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v2

      - name: 🐍 Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: 🔧 Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install -r build/requirements.txt

#      - name: 🔨 Build Python package (source distribution)
#        run: |
#          python setup.py sdist

      - name: 🔨 Build Python package (binary distribution - wheel)
        run: |
          python setup.py bdist_wheel

      - name: 📤 Upload 'pyTooling.Packaging' artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: dist/
          if-no-files-found: error
          retention-days: 1


  Release:
    name: 📝 Create 'Release Page' on GitHub
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage
      - StaticTypeCheck
      - Package

    env:
      PYTHON: ${{ needs.Coverage.outputs.python }}
    outputs:
      python:     ${{ env.PYTHON }}
      tag:        ${{ steps.getVariables.outputs.gitTag }}
      version:    ${{ steps.getVariables.outputs.version }}
      datetime:   ${{ steps.getVariables.outputs.datetime }}
      upload_url: ${{ steps.createReleasePage.outputs.upload_url }}

    steps:
      - name: 🔁 Extract Git tag from GITHUB_REF
        id:   getVariables
        run: |
          GIT_TAG=${GITHUB_REF#refs/*/}
          RELEASE_VERSION=${GIT_TAG#v}
          RELEASE_DATETIME="$(date --utc '+%d.%m.%Y - %H:%M:%S')"
          # write to step outputs
          echo ::set-output name=gitTag::${GIT_TAG}
          echo ::set-output name=version::${RELEASE_VERSION}
          echo ::set-output name=datetime::${RELEASE_DATETIME}

      - name: 📑 Create Release Page
        id:   createReleasePage
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.getVariables.outputs.gitTag }}
#          release_name: ${{ steps.getVariables.outputs.gitTag }}
          body: |
            **Automated Release created on: ${{ steps.getVariables.outputs.datetime }}**

            # New Features
            * tbd

            # Changes
            * tbd

            # Bug Fixes
            * tbd
          draft: false
          prerelease: false


  PublishOnPyPI:
    name: 🚀 Publish to PyPI
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Release
      - Package

    env:
      PYTHON:   ${{ needs.Package.outputs.python }}
      ARTIFACT: ${{ needs.Package.outputs.artifact }}
    outputs:
      python:   ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: 📥 Download artifacts '${{ env.ARTIFACT }}' from 'Package' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: dist/

      - name: 🐍 Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: ⚙ Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install -r dist/requirements.txt

      - name: ⤴ Release Python package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

      - name: 🗑️ Delete packaging Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ env.ARTIFACT }}


#  VerifyDocs:
#    name: 👍 Verify example snippets using Python 3.10
#    runs-on: ubuntu-latest
#
#    env:
#      PYTHON: "3.10"
#    outputs:
#      python: ${{ env.PYTHON }}
#
#    steps:
#      - name: ⏬ Checkout repository
#        uses: actions/checkout@v2
#
#      - name: 🐍 Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ env.PYTHON }}
#
#      - name: 🐍 Install dependencies
#        run: |
#          pip3 install .
#
#      - name: ✂ Extract code snippet from README
#        shell: python
#        run: |
#          from pathlib import Path
#          import re
#
#          ROOT = Path('.')
#
#          with (ROOT / 'README.md').open('r') as rptr:
#              content = rptr.read()
#
#          m = re.search(r"```py(thon)?(?P<code>.*?)```", content, re.MULTILINE|re.DOTALL)
#
#          if m is None:
#              raise Exception("Regular expression did not find the example in the README!")
#
#          with (ROOT / 'tests/docs/example.py').open('w') as wptr:
#              wptr.write(m["code"])
#
#      - name: Print example.py
#        run: cat tests/docs/example.py
#
#      - name: ☑ Run example snippet
#        working-directory: tests/docs
#        run: |
#          python3 example.py


  BuildTheDocs:
    name: 📓 Run BuildTheDocs
    runs-on: ubuntu-latest
#    needs:
#      - VerifyDocs

    env:
      ARTIFACT: pyTooling-documentation
    outputs:
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚢 Build container image 'vhdl/doc'
        run: |
          docker build -t edaa/doc - <<-EOF
          FROM btdi/sphinx:featured
          RUN apk add -U --no-cache graphviz
          EOF

      - name: 🛳️ Build documentation using container edaa/doc
        uses: buildthedocs/btd@v0
        with:
          skip-deploy: true

      - name: 📤 Upload 'documentation' artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT }}
          path: doc/_build/html
          retention-days: 7


  PublishTestResults:
    name: 📊 Publish Test Results to Issue Comment
    runs-on: ubuntu-latest

    needs:
      - UnitTesting

    if: always()

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: 💬 Comment Unit Test Results in Pull Request
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml

      - name: 📊 Publish Unit Test Results
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: artifacts/**/*.xml
          reporter: java-junit


  PublishToGitHubPages:
    name: 📚 Publish to GH-Pages
    runs-on: ubuntu-latest
    needs:
      - BuildTheDocs
      - Coverage
      - StaticTypeCheck

    env:
      DOC:      ${{ needs.BuildTheDocs.outputs.artifact }}
      COVERAGE: ${{ needs.Coverage.outputs.artifact }}
      TYPING:   ${{ needs.StaticTypeCheck.outputs.artifact }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 📥 Download artifacts '${{ env.DOC }}' from 'BuildTheDocs' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.DOC }}
          path: public

      - name: 📥 Download artifacts '${{ env.COVERAGE }}' from 'Coverage' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.COVERAGE }}
          path: public/coverage

      - name: 📥 Download artifacts '${{ env.TYPING }}' from 'StaticTypeCheck' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TYPING }}
          path: public/typing

      - name: '📓 Publish site to GitHub Pages'
        if: github.event_name != 'pull_request'
        run: |
          cd public
          touch .nojekyll
          git init
          cp ../.git/config ./.git/config
          git add .
          git config --local user.email "BuildTheDocs@GitHubActions"
          git config --local user.name "GitHub Actions"
          git commit -a -m "update ${{ github.sha }}"
          git push -u origin +HEAD:gh-pages


  ArtifactCleanUp:
    name: 🗑️ Artifact Cleanup
    runs-on: ubuntu-latest
    needs:
      - UnitTesting
      - Coverage
      - StaticTypeCheck
      - BuildTheDocs
      - Package
      - PublishTestResults
      - PublishToGitHubPages

    env:
#      UNITTEST: ${{ needs.UnitTesting.outputs.artifact }}-${{ needs.UnitTesting.outputs.versions }}
      COVERAGE: ${{ needs.Coverage.outputs.artifact }}
      TYPING:   ${{ needs.StaticTypeCheck.outputs.artifact }}
      DOC:      ${{ needs.BuildTheDocs.outputs.artifact }}
      PACKAGE:  ${{ needs.Package.outputs.artifact }}

    steps:
      - name: 🗑️ Delete package Artifacts
        if: ${{ ! startsWith(github.ref, 'refs/tags') }}
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ env.PACKAGE }}

      - name: 🗑️ Delete remaining Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ needs.UnitTesting.outputs.artifact }}-3.6
            ${{ needs.UnitTesting.outputs.artifact }}-3.7
            ${{ needs.UnitTesting.outputs.artifact }}-3.8
            ${{ needs.UnitTesting.outputs.artifact }}-3.9
            ${{ needs.UnitTesting.outputs.artifact }}-3.10
            ${{ env.COVERAGE }}
            ${{ env.DOC }}
            ${{ env.TYPING }}
