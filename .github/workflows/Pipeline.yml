name: Pipeline

on:
  push:
  workflow_dispatch:

jobs:

  UnitTestingParams:
    uses: pyTooling/Actions/.github/workflows/Parameters.yml@dev
    with:
      name: pyTooling
      python_version_list: "3.7 3.8 3.9 3.10 pypy-3.8 pypy-3.9"
      include_list: "ubuntu:3.11 macos:3.11"
      exclude_list: "windows:pypy-3.7 windows:pypy-3.8"

  PerformanceTestingParams:
    uses: pyTooling/Actions/.github/workflows/Parameters.yml@dev
    with:
      name: pyTooling
      python_version_list: "3.10"
      system_list: "ubuntu windows macos"

  BenchmarkingParams:
    uses: pyTooling/Actions/.github/workflows/Parameters.yml@dev
    with:
      name: pyTooling
      python_version_list: "3.7 3.8 3.9 3.10"

  PlatformTestingParams:
    uses: pyTooling/Actions/.github/workflows/Parameters.yml@dev
    with:
      name: pyTooling
      python_version_list: "3.10"
      system_list: "ubuntu windows macos mingw32 mingw64 clang64 ucrt64"

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
    needs:
      - UnitTestingParams
    with:
      jobs: ${{ needs.UnitTestingParams.outputs.python_jobs }}
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}
      pacboy: >-
        python-pip:p
        python-wheel:p
        python-coverage:p
        python-lxml:p
        python-ruamel-yaml:p
        python-ruamel.yaml.clib:p
        python-numpy:p

  PerformaceTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
    needs:
      - PerformanceTestingParams
    with:
      jobs: ${{ needs.PerformanceTestingParams.outputs.python_jobs }}
      requirements: '-r tests/performance/requirements.txt'
#      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}
      unittest_directory: 'tests/performance'
      pacboy: >-
        python-pip:p
        python-wheel:p
        python-coverage:p
        python-lxml:p
        python-ruamel-yaml:p
        python-ruamel.yaml.clib:p
        python-numpy:p
        igraph:p
        cmake:p
        clang:p

  Benchmarking:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
    needs:
      - BenchmarkingParams
    with:
      jobs: ${{ needs.BenchmarkingParams.outputs.python_jobs }}
      requirements: '-r tests/benchmark/requirements.txt'
#      artifact: ${{ fromJson(needs.BenchmarkingParams.outputs.params).artifacts.unittesting }}
      unittest_directory: 'tests/benchmark'
      pacboy: >-
        python-pip:p
        python-wheel:p
        python-coverage:p
        python-lxml:p
        python-ruamel-yaml:p
        python-ruamel.yaml.clib:p
        python-numpy:p

  PlatformTests:
    name: ${{ matrix.sysicon }} ${{ matrix.pyicon }} Platform Tests using Python ${{ matrix.python }}
    runs-on: ${{ matrix.runs-on }}
    needs:
      - PlatformTestingParams

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.PlatformTestingParams.outputs.python_jobs) }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v3

      - name: 'üü¶ Setup MSYS2'
        if: matrix.system == 'msys2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.runtime }}
          update: true
          pacboy: >-
            python-pip:p
            python-wheel:p
            python-coverage:p
            python-lxml:p
            python-ruamel-yaml:p
            python-ruamel.yaml.clib:p
            python-numpy:p

      - name: üêç Setup Python ${{ matrix.python }}
        if: matrix.system != 'msys2'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: ‚öô Update pip
        run: python -m pip install -U pip

      - name: üîß Install wheel and pip dependencies
        if: matrix.system != 'msys2'
        run: |
          python -m pip install -U wheel
          python -m pip install -r tests/requirements.txt

      - name: üîß Install pip dependencies
        if: matrix.system == 'msys2'
        run: |
          python -m pip install -r tests/requirements.txt

      - name: ‚òë Run unit tests
        if: matrix.shell != 'pwsh'
        run: |
          export EXPECTED="${{ matrix.envname }}"
          python -m pytest -rA tests/unit/Common/Platform.py --color=yes

      - name: ‚òë Run unit tests
        if: matrix.shell == 'pwsh'
        run: |
          $env:EXPECTED = "${{ matrix.envname }}"
          python -m pytest -rA tests/unit/Common/Platform.py --color=yes

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CoverageCollection.yml@r0
    needs:
      - UnitTestingParams
    with:
      python_version: ${{ fromJson(needs.UnitTestingParams.outputs.params).python_version }}
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.coverage }}
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  StaticTypeCheck:
    uses: pyTooling/Actions/.github/workflows/StaticTypeCheck.yml@r0
    needs:
      - UnitTestingParams
    with:
      python_version: ${{ fromJson(needs.UnitTestingParams.outputs.params).python_version }}
      commands: |
        touch pyTooling/__init__.py
        mypy --html-report htmlmypy -p pyTooling
      report: 'htmlmypy'
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.typing }}

  PublishTestResults:
    uses: pyTooling/Actions/.github/workflows/PublishTestResults.yml@r0
    needs:
      - UnitTesting
      - PerformaceTesting
      - Benchmarking

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@r0
    needs:
      - UnitTestingParams
      - Coverage
      - PlatformTests
    with:
      python_version: ${{ fromJson(needs.UnitTestingParams.outputs.params).python_version }}
      requirements: -r build/requirements.txt
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.package }}

  Release:
    uses: pyTooling/Actions/.github/workflows/Release.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage
      - StaticTypeCheck
      - Package

  PublishOnPyPI:
    uses: pyTooling/Actions/.github/workflows/PublishOnPyPI.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTestingParams
      - Release
      - Package
    with:
      python_version: ${{ fromJson(needs.UnitTestingParams.outputs.params).python_version }}
      requirements: -r dist/requirements.txt
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.package }}
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

#  VerifyDocs:
#    uses: pyTooling/Actions/.github/workflows/VerifyDocs.yml@r0
#    needs:
#      - UnitTestingParams
#    with:
#      python_version: ${{ fromJson(needs.UnitTestingParams.outputs.params).python_version }}

  BuildTheDocs:
    uses: pyTooling/Actions/.github/workflows/BuildTheDocs.yml@r0
    needs:
      - UnitTestingParams
#      - VerifyDocs
    with:
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.doc }}

  PublishToGitHubPages:
    uses: pyTooling/Actions/.github/workflows/PublishToGitHubPages.yml@r0
    needs:
      - UnitTestingParams
      - BuildTheDocs
      - Coverage
      - StaticTypeCheck
    with:
      doc: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.doc }}
      coverage: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.coverage }}
      typing: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.typing }}

  ArtifactCleanUp:
    uses: pyTooling/Actions/.github/workflows/ArtifactCleanUp.yml@r0
    needs:
      - UnitTestingParams
      - UnitTesting
      - PerformaceTesting
      - Benchmarking
      - PlatformTests
      - Coverage
      - StaticTypeCheck
      - BuildTheDocs
      - PublishToGitHubPages
      - PublishTestResults
    with:
      package: ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.package }}
      remaining: |
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-ubuntu-3.7
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-ubuntu-3.8
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-ubuntu-3.9
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-ubuntu-3.10
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-windows-3.7
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-windows-3.8
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-windows-3.9
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-windows-3.10
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-msys2-3.9
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-macos-3.7
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-macos-3.8
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-macos-3.9
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.unittesting }}-macos-3.10
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.coverage }}
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.typing }}
        ${{ fromJson(needs.UnitTestingParams.outputs.params).artifacts.doc }}
