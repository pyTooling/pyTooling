name: Pipeline

on:
  push:
  workflow_dispatch:

jobs:

  Params:
    uses: pyTooling/Actions/.github/workflows/Parameters.yml@r0
    with:
      name: pyTooling
      python_version_list: "3.10"
      system_list: "ubuntu windows macos"

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
    needs:
      - Params
    with:
      jobs: ${{ needs.Params.outputs.python_jobs }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}
      pacboy: >-
        python-pip:p
        python-wheel:p
        python-coverage:p
        python-lxml:p
        python-ruamel-yaml:p
        python-ruamel.yaml.clib:p
        python-numpy:p

#  PerformaceTesting:
#    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
#    needs:
#      - Params
#    with:
#      jobs: ${{ needs.Params.outputs.python_jobs }}
##      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}
#      unittest_directory: 'tests/performance'
#      pacboy: >-
#        python-pip:p
#        python-wheel:p
#        python-coverage:p
#        python-lxml:p
#        python-ruamel-yaml:p
#        python-ruamel.yaml.clib:p
#        python-numpy:p

#  Benchmarking:
#    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
#    needs:
#      - Params
#    with:
#      jobs: ${{ needs.Params.outputs.python_jobs }}
##      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}
#      unittest_directory: 'tests/benchmark'
#      pacboy: >-
#        python-pip:p
#        python-wheel:p
#        python-coverage:p
#        python-lxml:p
#        python-ruamel-yaml:p
#        python-ruamel.yaml.clib:p
#        python-numpy:p

  PlatformTests:
    name: ${{ matrix.sysicon }} ${{ matrix.pyicon }} Platform Tests using Python ${{ matrix.python }}
    runs-on: ${{ matrix.runs-on }}
    needs:
      - Params

    strategy:
      fail-fast: false
      matrix:
        include:
          - {system: "ubuntu",  runs-on: "ubuntu-latest",  runtime: "native",  shell: "bash",      sysicon: "üêß", pyicon: "üü¢", python: "3.10", expected: "Linux (x86-64)"}
          - {system: "windows", runs-on: "windows-latest", runtime: "native",  shell: "pwsh",      sysicon: "üßä", pyicon: "üü¢", python: "3.10", expected: "Windows (x86-64)"}
##          - {system: "msys2",   runs-on: "windows-latest", runtime: "MSYS",    shell: "msys2 {0}", sysicon: "üü™", pyicon: "üü¢",                 expected: "Windows+MSYS2 (x86-64) - MSYS"}
#          - {system: "msys2",   runs-on: "windows-latest", runtime: "MINGW32", shell: "msys2 {0}", sysicon: "‚¨õ", pyicon: "üü¢",                  expected: "Windows+MSYS2 (x86-64) - MinGW32"}
#          - {system: "msys2",   runs-on: "windows-latest", runtime: "MINGW64", shell: "msys2 {0}", sysicon: "üü¶", pyicon: "üü¢",                 expected: "Windows+MSYS2 (x86-64) - MinGW64"}
#          - {system: "msys2",   runs-on: "windows-latest", runtime: "UCRT64",  shell: "msys2 {0}", sysicon: "üü®", pyicon: "üü¢",                 expected: "Windows+MSYS2 (x86-64) - UCRT64"}
##          - {system: "msys2",   runs-on: "windows-latest", runtime: "CLANG32", shell: "msys2 {0}", sysicon: "üü´", pyicon: "üü¢",                expected: "Windows+MSYS2 (x86-64) - Clang32"}
#          - {system: "msys2",   runs-on: "windows-latest", runtime: "CLANG64", shell: "msys2 {0}", sysicon: "üüß", pyicon: "üü¢",                 expected: "Windows+MSYS2 (x86-64) - Clang64"}
          - {system: "macos",   runs-on: "macos-latest",   runtime: "native",  shell: "bash",      sysicon: "üçé", pyicon: "üü¢", python: "3.10", expected: "MacOS (x86-64)"}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v3

      - name: 'üü¶ Setup MSYS2'
        if: matrix.system == 'msys2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.runtime }}
          update: true
          pacboy: >-
            python-pip:p
            python-wheel:p
            python-coverage:p
            python-lxml:p
            python-ruamel-yaml:p
            python-ruamel.yaml.clib:p
            python-numpy:p

      - name: üêç Setup Python ${{ matrix.python }}
        if: matrix.system != 'msys2'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: ‚öô Update pip
        run: python -m pip install -U pip

      - name: üîß Install wheel and pip dependencies
        if: matrix.system != 'msys2'
        run: |
          python -m pip install -U wheel
          python -m pip install -r tests/requirements.txt

      - name: üîß Install pip dependencies
        if: matrix.system == 'msys2'
        run: |
          python -m pip install -r tests/requirements.txt

      - name: üîÅ Extract configurations from pyproject.toml
        id: getVariables
        shell: python
        run: |
          from pathlib import Path
          from tomli   import load as tomli_load

          xmlFile = './coverage.xml'

          # Read output paths from 'pyproject.toml' file
          pyProjectFile =  Path("pyproject.toml")
          if pyProjectFile.exists():
              with pyProjectFile.open("rb") as file:
                  pyProjectSettings = tomli_load(file)

              xmlFile = pyProjectSettings["tool"]["coverage"]["xml"]["output"]
          else:
              print(f"File '{pyProjectFile}' not found.")
              print(f"::warning title=Configuration file not found::Project configuration file '{pyProjectFile}' not found. Using default file {xmlFile}'.")

          print(f"::set-output name=coverage_report_xml::{xmlFile}")
          print(f"DEBUG:\n  xml={xmlFile}")

      - name: ‚òë Run unit tests (Bash)
        if: matrix.shell != 'pwsh'
        run: |
          export EXPECTED="${{ matrix.expected }}"
          python -m pytest -rA tests/unit/Common/Platform.py --cov=. --color=yes

      - name: ‚òë Run unit tests (PowerShell)
        if: matrix.shell == 'pwsh'
        run: |
          $env:EXPECTED = "${{ matrix.expected }}"
          python -m pytest -rA tests/unit/Common/Platform.py --cov=. --color=yes

      - name: Convert to cobertura format
        run: coverage xml

      - name: üì§ Upload 'Coverage XML Report' artifact
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: Platform-${{ matrix.system }}-${{ matrix.runtime }}-xml
          path: ${{ steps.getVariables.outputs.coverage_report_xml }}
          if-no-files-found: error
          retention-days: 1

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CodeCoverage.yml@codecoverage
    needs:
      - Params
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
      publish_to_codecov: 'false'
      publish_to_codacy: 'false'

#    secrets:
#      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  MergeCodeCoverage:
    name: Merge Coverage Reports from Platforms
    runs-on: ubuntu-latest
    needs:
      - Coverage
      - PlatformTests

    steps:
      - name: üóÇ Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install cobertura tree

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Merge code coverage reports from platform tests
        run: |
          tree -L 2 -d artifacts
          tree -P "*.xml" --prune artifacts

#  PublishCoverage:
#    uses: pyTooling/Actions/.github/workflows/PublishCodeCoverage.yml@codecoverage
#    needs:
#      - MergeCodeCoverage
#    with:
##      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
#      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
#    secrets:
#      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  StaticTypeCheck:
    uses: pyTooling/Actions/.github/workflows/StaticTypeCheck.yml@r0
    needs:
      - Params
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      commands: |
        touch pyTooling/__init__.py
        mypy --html-report htmlmypy -p pyTooling
      report: 'htmlmypy'
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}

  PublishTestResults:
    uses: pyTooling/Actions/.github/workflows/PublishTestResults.yml@r0
    needs:
      - UnitTesting
#      - PerformaceTesting
#      - Benchmarking

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@r0
    needs:
      - Params
      - Coverage
      - PlatformTests
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      requirements: -r build/requirements.txt
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}

  Release:
    uses: pyTooling/Actions/.github/workflows/Release.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage
      - StaticTypeCheck
      - Package

  PublishOnPyPI:
    uses: pyTooling/Actions/.github/workflows/PublishOnPyPI.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Params
      - Release
      - Package
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      requirements: -r dist/requirements.txt
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

#  VerifyDocs:
#    uses: pyTooling/Actions/.github/workflows/VerifyDocs.yml@r0
#    needs:
#      - Params
#    with:
#      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}

  BuildTheDocs:
    uses: pyTooling/Actions/.github/workflows/BuildTheDocs.yml@r0
    needs:
      - Params
#      - VerifyDocs
    with:
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}

  PublishToGitHubPages:
    uses: pyTooling/Actions/.github/workflows/PublishToGitHubPages.yml@r0
    needs:
      - Params
      - BuildTheDocs
      - Coverage
      - StaticTypeCheck
    with:
      doc: ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}
      coverage: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}-html
      typing: ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}

  ArtifactCleanUp:
    uses: pyTooling/Actions/.github/workflows/ArtifactCleanUp.yml@r0
    needs:
      - Params
      - UnitTesting
#      - PerformaceTesting
#      - Benchmarking
      - PlatformTests
      - Coverage
#      - MergeCodeCoverage
      - StaticTypeCheck
      - BuildTheDocs
      - PublishToGitHubPages
      - PublishTestResults
    with:
      package: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}
      remaining: |
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.7
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.8
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.10
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.7
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.8
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.10
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-msys2-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.7
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.8
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.10
        ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
        ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}
        ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}
